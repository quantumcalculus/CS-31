// Ollie Kurilov, December 2019
// vampires.cpp

#include <iostream>
#include <string>
#include <random>
#include <utility>
#include <cstdlib>
#include <cctype>
#include <type_traits>
#include <cassert>
using namespace std;

///////////////////////////////////////////////////////////////////////////
// Manifest constants
///////////////////////////////////////////////////////////////////////////

const int MAXROWS = 20;                // max number of rows in the arena
const int MAXCOLS = 20;                // max number of columns in the arena
const int MAXVAMPIRES = 100;           // max number of vampires allowed

const int NORTH = 0;
const int EAST = 1;
const int SOUTH = 2;
const int WEST = 3;
const int NUMDIRS = 4;

const int EMPTY = 0;
const int HAS_POISON = 1;

const int FULL = 2;

void doBasicTests();

///////////////////////////////////////////////////////////////////////////
// Type definitions
///////////////////////////////////////////////////////////////////////////

class Arena;  // This is needed to let the compiler know that Arena is a
			  // type name, since it's mentioned in the Vampire declaration.

class Vampire
{
public:
	// Constructor
	Vampire(Arena* ap, int r, int c);

	// Accessors
	int  row() const;
	int  col() const;
	int health() const;
	bool isDead() const;

	// Mutators
	void move();

private:
	Arena* m_arena;
	int    m_row;
	int    m_col;
	int healthUnits = 2;
	int timespoisoned = 0;
};

class Player
{
public:
	// Constructorfaf
	Player(Arena* ap, int r, int c);

	// Accessors
	int  row() const;
	int  col() const;
	bool isDead() const;

	// Mutators
	string dropPoisonVial();
	string move(int dir);
	void   setDead();

private:
	Arena* m_arena;
	int    m_row;
	int    m_col;
	bool   m_dead;
};

class Arena
{
public:
	// Constructor/destructor
	Arena(int nRows, int nCols);
	~Arena();

	// Accessors
	int     rows() const;//
	int     cols() const;
	Player* player() const;
	int     vampireCount() const;
	int     getCellStatus(int r, int c) const;
	int     numberOfVampiresAt(int r, int c) const;
	void    display(string msg) const;

	// Mutators
	void setCellStatus(int r, int c, int status);
	bool addVampire(int r, int c);
	bool addPlayer(int r, int c);
	void moveVampires();

private:
	int      m_grid[MAXROWS][MAXCOLS];
	int      m_rows;
	int      m_cols;
	Player* m_player;
	Vampire* m_vampires[MAXVAMPIRES];
	int      m_nVampires;
	int      m_turns;

	// Helper functions
	void checkPos(int r, int c, string functionName) const;
	bool isPosInBounds(int r, int c) const;
};

class Game
{
public:
	// Constructor/destructor
	Game(int rows, int cols, int nVampires);
	~Game();

	// Mutators
	void play();

private:
	Arena* m_arena;

	// Helper functions
	string takePlayerTurn();
};

///////////////////////////////////////////////////////////////////////////
//  Auxiliary function declarations
///////////////////////////////////////////////////////////////////////////

int randInt(int lowest, int highest);
bool decodeDirection(char ch, int& dir);
bool attemptMove(const Arena& a, int dir, int& r, int& c);
int vampiresAround(const Arena& a, int r, int c); // do not change values of r and c!!!
bool recommendMove(const Arena& a, int r, int c, int& bestDir);
void clearScreen();

///////////////////////////////////////////////////////////////////////////
//  Vampire implementation
///////////////////////////////////////////////////////////////////////////

Vampire::Vampire(Arena* ap, int r, int c)
{
	if (ap == nullptr)
	{
		cout << "***** A vampire must be created in some Arena!" << endl;
		exit(1);
	}
	if (r < 1 || r > ap->rows() || c < 1 || c > ap->cols())
	{
		cout << "***** Vampire created with invalid coordinates (" << r << ","
			<< c << ")!" << endl;
		exit(1);
	}
	m_arena = ap;
	m_row = r;
	m_col = c;
}

int Vampire::row() const
{
	return m_row;
}

int Vampire::health() const
{
	return healthUnits;
}

int Vampire::col() const
{
	return m_col;
}

bool Vampire::isDead() const
{
	if (healthUnits == 0 || healthUnits < 1) {
		return true;
	}
	else
		return false;
}

void Vampire::move()
{
	int dir = randInt(0, 3);

	if (timespoisoned == 0) {
		attemptMove(*m_arena, dir, m_row, m_col);
	}
	else if (timespoisoned % 2 == 0) {
		attemptMove(*m_arena, dir, m_row, m_col);
		timespoisoned++;
	}
	else if ((timespoisoned % 2 != 0) && (timespoisoned != 0)) {
		timespoisoned++;
	}

	if (m_arena->getCellStatus(m_row, m_col) == HAS_POISON) {
		m_arena->setCellStatus(m_row, m_col, EMPTY);
		healthUnits--;
		timespoisoned++;
	}
}

///////////////////////////////////////////////////////////////////////////
//  Player implementation
///////////////////////////////////////////////////////////////////////////

Player::Player(Arena* ap, int r, int c)
{
	if (ap == nullptr)
	{
		cout << "***** The player must be created in some Arena!" << endl;
		exit(1);
	}
	if (r < 1 || r > ap->rows() || c < 1 || c > ap->cols())
	{
		cout << "**** Player created with invalid coordinates (" << r
			<< "," << c << ")!" << endl;
		exit(1);
	}
	m_arena = ap;
	m_row = r;
	m_col = c;
	m_dead = false;
}

int Player::row() const
{
	return m_row;
}

int Player::col() const
{
	return m_col;
}

string Player::dropPoisonVial()
{
	if (m_arena->getCellStatus(m_row, m_col) == HAS_POISON)
		return "There's already a poisoned blood vial at this spot.";
	m_arena->setCellStatus(m_row, m_col, HAS_POISON);
	return "A poisoned blood vial has been dropped.";
}

string Player::move(int dir)
{
	string nomove = "Player couldn't move; player stands.";
	string death = "Player walked into a vampire and died.";
	string move = "Player moved ";
	if (!attemptMove(*m_arena, dir, m_row, m_col)) {
		return nomove;
	}
	if (m_arena->numberOfVampiresAt(m_row, m_col) != 0) {
		setDead();
		return death;
	}
	switch (dir) {
	case NORTH: {
		return "Player moved north.";
		break;
	}
	case SOUTH: {
		return "Player moved south.";
		break;
	}
	case WEST: {
		return "Player moved west.";
		break;
	}
	case EAST: {
		return "Player moved east.";
		break;
	}
	default: {
		return "!!!!!"; // error!!! must never reach this point
	}
	}

}

bool Player::isDead() const
{
	return m_dead;
}

void Player::setDead()
{
	m_dead = true;
}

///////////////////////////////////////////////////////////////////////////
//  Arena implementation
///////////////////////////////////////////////////////////////////////////

Arena::Arena(int nRows, int nCols)
{
	if (nRows <= 0 || nCols <= 0 || nRows > MAXROWS || nCols > MAXCOLS)
	{
		cout << "***** Arena created with invalid size " << nRows << " by "
			<< nCols << "!" << endl;
		exit(1);
	}
	m_rows = nRows;
	m_cols = nCols;
	m_player = nullptr;
	m_nVampires = 0;
	m_turns = 0;
	for (int r = 1; r <= m_rows; r++)
		for (int c = 1; c <= m_cols; c++)
			setCellStatus(r, c, EMPTY);
}

Arena::~Arena()
{
	delete m_player;

	for (int i = 0; i < m_nVampires; i++) {
		delete m_vampires[i];
	}
}

int Arena::rows() const
{
	return m_rows;
}

int Arena::cols() const
{
	return m_cols;
}

Player* Arena::player() const
{
	return m_player;
}

int Arena::vampireCount() const
{
	return m_nVampires;
}

int Arena::getCellStatus(int r, int c) const
{
	checkPos(r, c, "Arena::getCellStatus");
	return m_grid[r - 1][c - 1];
}

int Arena::numberOfVampiresAt(int r, int c) const
{
	int vampiresHere = 0;
	int i;

	for (i = 0; i < m_nVampires; i++) {
		Vampire* ppointer = m_vampires[i];
		if ((ppointer->row() == r) && (ppointer->col() == c)) {
			vampiresHere++;
		}
	}
	return vampiresHere;
}

void Arena::display(string msg) const
{
	char displayGrid[MAXROWS][MAXCOLS];
	int r, c;

	for (r = 1; r <= rows(); r++) {
		for (c = 1; c <= cols(); c++) {
			if (getCellStatus(r, c) == EMPTY) {
				displayGrid[r - 1][c - 1] = '.';
			}
			if (getCellStatus(r, c) != EMPTY) {
				displayGrid[r - 1][c - 1] = '*';
			}
		}
	}

	for (r = 1; r <= rows(); r++) {
		for (c = 1; c <= cols(); c++) {
			int nCurrent = numberOfVampiresAt(r, c);
			if (nCurrent == 1) {
				displayGrid[r - 1][c - 1] = 'V';
			}
			else if (nCurrent > 1 && nCurrent < 9) {
				displayGrid[r - 1][c - 1] = nCurrent + '0';
			}
			else if (nCurrent >= 9) {
				displayGrid[r - 1][c - 1] = 9 + '0';
			}

		}
	}

	if (m_player != nullptr) {
		char& gridChar = displayGrid[m_player->row() - 1][m_player->col() - 1];
		if ((gridChar == '.') || (gridChar == '*')) {
			gridChar = '@';
		}
		if (numberOfVampiresAt(r - 1, c - 1) > 0) {
			gridChar == 'X';
			m_player->isDead();
		}
	}

	// Draw the grid
	clearScreen();
	for (r = 1; r <= rows(); r++)
	{
		for (c = 1; c <= cols(); c++)
			cout << displayGrid[r - 1][c - 1];
		cout << endl;
	}
	cout << endl;

	// Write message, vampire, and player info
	if (msg != "")
		cout << msg << endl;
	cout << "There are " << vampireCount() << " vampires remaining." << endl;
	if (m_player == nullptr)
		cout << "There is no player!" << endl;
	else if (m_player->isDead())
		cout << "The player is dead." << endl;
	cout << m_turns << " turns have been taken." << endl;
}

void Arena::setCellStatus(int r, int c, int status)
{
	checkPos(r, c, "Arena::setCellStatus");
	m_grid[r - 1][c - 1] = status;
}

bool Arena::addVampire(int r, int c)
{
	if (!isPosInBounds(r, c))
		return false;

	// Don't add a vampire on a spot with a poisoned blood vial
	if (getCellStatus(r, c) != EMPTY)
		return false;

	// Don't add a vampire on a spot with a player
	if (m_player != nullptr && m_player->row() == r && m_player->col() == c)
		return false;

	if (m_nVampires < MAXVAMPIRES) {
		m_vampires[m_nVampires] = new Vampire(this, r, c);
		m_nVampires++;
		return true;
	}
	else {
		return false;
	}
}

bool Arena::addPlayer(int r, int c)
{
	if (!isPosInBounds(r, c))
		return false;

	// Don't add a player if one already exists
	if (m_player != nullptr)
		return false;

	// Don't add a player on a spot with a vampire
	if (numberOfVampiresAt(r, c) > 0)
		return false;

	m_player = new Player(this, r, c);
	return true;
}

void Arena::moveVampires()
{
	for (int i = 0; i < m_nVampires; i++) {
		Vampire* ppointer = m_vampires[i];
		ppointer->move();
		// if vampire lands on the same gridpos as player, player dies
		if (ppointer->row() == m_player->row() && ppointer->col() == m_player->col()) {
			m_player->setDead();
		}
		if (ppointer->isDead()) {
			delete ppointer;
			for (int j = i; j < m_nVampires-1; j++) {
					m_vampires[j] = m_vampires[j + 1];
			}
		    i--;
			m_nVampires--;
		}
	}
	m_turns++;
}

bool Arena::isPosInBounds(int r, int c) const
{
	return (r >= 1 && r <= m_rows && c >= 1 && c <= m_cols);
}

void Arena::checkPos(int r, int c, string functionName) const
{
	if (r < 1 || r > m_rows || c < 1 || c > m_cols)
	{
		cout << "***** " << "Invalid arena position (" << r << ","
			<< c << ") in call to " << functionName << endl;
		exit(1);
	}
}

///////////////////////////////////////////////////////////////////////////
//  Game implementation
///////////////////////////////////////////////////////////////////////////

Game::Game(int rows, int cols, int nVampires)
{
	if (nVampires < 0)
	{
		cout << "***** Cannot create Game with negative number of vampires!" << endl;
		exit(1);
	}
	if (nVampires > MAXVAMPIRES)
	{
		cout << "***** Trying to create Game with " << nVampires
			<< " vampires; only " << MAXVAMPIRES << " are allowed!" << endl;
		exit(1);
	}
	int nEmpty = rows * cols - nVampires - 1;  // 1 for Player
	if (nEmpty < 0)
	{
		cout << "***** Game created with a " << rows << " by "
			<< cols << " arena, which is too small too hold a player and "
			<< nVampires << " vampires!" << endl;
		exit(1);
	}

	// Create arena
	m_arena = new Arena(rows, cols);

	// Add player
	int rPlayer;
	int cPlayer;
	do
	{
		rPlayer = randInt(1, rows);
		cPlayer = randInt(1, cols);
	} while (m_arena->getCellStatus(rPlayer, cPlayer) != EMPTY);
	m_arena->addPlayer(rPlayer, cPlayer);

	// Populate with vampires
	while (nVampires > 0)
	{
		int r = randInt(1, rows);
		int c = randInt(1, cols);
		if (r == rPlayer && c == cPlayer)
			continue;
		m_arena->addVampire(r, c);
		nVampires--;
	}
}

Game::~Game()
{
	delete m_arena;
}

string Game::takePlayerTurn()
{
	for (;;)
	{
		cout << "Your move (n/e/s/w/x or nothing): ";
		string playerMove;
		getline(cin, playerMove);

		Player* player = m_arena->player();
		int dir;

		if (playerMove.size() == 0)
		{
			if (recommendMove(*m_arena, player->row(), player->col(), dir))
				return player->move(dir);
			else
				return player->dropPoisonVial();
		}
		else if (playerMove.size() == 1)
		{
			if (tolower(playerMove[0]) == 'x')
				return player->dropPoisonVial();
			else if (decodeDirection(playerMove[0], dir))
				return player->move(dir);
		}
		cout << "Player move must be nothing, or 1 character n/e/s/w/x." << endl;
	}
}

void Game::play()
{
	m_arena->display("");
	Player* player = m_arena->player();
	if (player == nullptr)
		return;
	while (!player->isDead() && m_arena->vampireCount() > 0)
	{
		string msg = takePlayerTurn();
		m_arena->display(msg);
		if (player->isDead())
			break;
		m_arena->moveVampires();
		m_arena->display(msg);
	}
	if (player->isDead())
		cout << "You lose." << endl;
	else
		cout << "You win." << endl;
}

///////////////////////////////////////////////////////////////////////////
//  Auxiliary function implementation
///////////////////////////////////////////////////////////////////////////

  // Return a uniformly distributed random int from lowest to highest, inclusive
int randInt(int lowest, int highest)
{
	if (highest < lowest)
		swap(highest, lowest);
	static random_device rd;
	static default_random_engine generator(rd());
	uniform_int_distribution<> distro(lowest, highest);
	return distro(generator);
}

bool decodeDirection(char ch, int& dir)
{
	switch (tolower(ch))
	{
	default:  return false;
	case 'n': dir = NORTH; break;
	case 'e': dir = EAST;  break;
	case 's': dir = SOUTH; break;
	case 'w': dir = WEST;  break;
	}
	return true;
}

// Return false without changing anything if moving one step from (r,c)
// in the indicated direction would run off the edge of the arena.
// Otherwise, update r and c to the position resulting from the move and
// return true.
bool attemptMove(const Arena& a, int dir, int& r, int& c)
{
	int rbefore = r;
	int cbefore = c;

	switch (dir) {
	case NORTH: {
		if (c > 1) {
			c--;
			break;
		}
	}
	case SOUTH: {
		if (a.isPositionInBounds(r, c + 1)) {
			c++;
			break;
		}
	}
	case EAST: {
		if (a.isPositionInBounds(r + 1, c)) {
			r++;
			break;
		}
	}
	case WEST: {
		if (r > 1) {
			r--;
			break;
		}
	}
	default:
		return "Impossible to reach this point";
	}
	if (!(r >= 1 && r <= a.rows() && c >= 1 && c <= a.cols() )) {
		r = rbefore;
		c = cbefore;
		return false;
	}
	return true;
}

int vampiresAround(const Arena& a, int r, int c) {
	int see = 0;
	see = a.numberOfVampiresAt(r, c);
	int m_vampires = see;
	int* i = 0;
	for (int i = 0; i < MAXVAMPIRES; i++) {
		int count = 0;
		while (i != MAXVAMPIRES & see > 0) {
			count++;
		}
	}
	return see;
}
bool recommendMove(const Arena& a, int r, int c, int& bestDir)
{
	int initialNum = 0;
	initialNum = vampiresAround(a, r, c);
	if (vampiresAround(a, r, c - 1) < initialNum) {
		initialNum = vampiresAround(a, r, c - 1);
		bestDir = NORTH;
	}
	if ((vampiresAround(a, r, c + 1) < initialNum) && bestDir != NORTH) {
		initialNum = vampiresAround(a, r, c + 1);
		bestDir = SOUTH;
	}
	if (vampiresAround(a, r + 1, c) < initialNum && bestDir != NORTH && bestDir != SOUTH) {
		initialNum = vampiresAround(a, r + 1, c);
		bestDir = WEST;
	}
	if (vampiresAround(a, r - 1, c) < initialNum) {
		initialNum = vampiresAround(a, r - 1, c);
		bestDir = EAST;
	}
	if (initialNum == vampiresAround(a, r, c)) {
		return false; // poisoned blood vial case
	}
	else
		return true;
}

///////////////////////////////////////////////////////////////////////////
// main()
///////////////////////////////////////////////////////////////////////////

int main()
{


	// Create a game
 	Game g(3, 5, 2);
	// Game g(10, 12, 40);

	// Play the game
	g.play();

}

///////////////////////////////////////////////////////////////////////////
//  clearScreen implementation
///////////////////////////////////////////////////////////////////////////

#ifdef _MSC_VER  //  Microsoft Visual C++

#pragma warning(disable : 4005)
#include <windows.h>
/*
void clearScreen()
{
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_SCREEN_BUFFER_INFO csbi;
	GetConsoleScreenBufferInfo(hConsole, &csbi);
	DWORD dwConSize = csbi.dwSize.X * csbi.dwSize.Y;
	COORD upperLeft = { 0, 0 };
	DWORD dwCharsWritten;
	FillConsoleOutputCharacter(hConsole, TCHAR(' '), dwConSize, upperLeft,
		&dwCharsWritten);
	SetConsoleCursorPosition(hConsole, upperLeft);
}

#else  // not Microsoft Visual C++, so assume UNIX interface

#include <iostream>
#include <cstring>
#include <cstdlib>

void clearScreen()  // will just write a newline in an Xcode output window
{
	static const char* term = getenv("TERM");
	if (term == nullptr || strcmp(term, "dumb") == 0)
		cout << endl;
	else
	{
		static const char* ESC_SEQ = "\x1B[";  // ANSI Terminal esc seq:  ESC [
		cout << ESC_SEQ << "2J" << ESC_SEQ << "H" << flush;
	}
}

#endif

#define CHECKTYPE(c, f, r, a)  \
    static_assert(std::is_same<decltype(&c::f), r (c::*)a>::value, \
       "FAILED: You changed the type of " #c "::" #f);  \
    [[gnu::unused]] auto xxx##c##_##f = static_cast<r(c::*)a>(&c::f)

void thisFunctionWillNeverBeCalled()
{
	// If the student deleted or changed the interfaces to the public
	// functions, this won't compile.  (This uses magic beyond the scope
	// of CS 31.)

	Vampire v(static_cast<Arena*>(0), 1, 1);
	CHECKTYPE(Vampire, row, int, () const);
	CHECKTYPE(Vampire, col, int, () const);
	CHECKTYPE(Vampire, isDead, bool, () const);
	CHECKTYPE(Vampire, move, void, ());

	Player p(static_cast<Arena*>(0), 1, 1);
	CHECKTYPE(Player, row, int, () const);
	CHECKTYPE(Player, col, int, () const);
	CHECKTYPE(Player, isDead, bool, () const);
	CHECKTYPE(Player, dropPoisonVial, string, ());
	CHECKTYPE(Player, move, string, (int));
	CHECKTYPE(Player, setDead, void, ());

	Arena a(1, 1);
	CHECKTYPE(Arena, rows, int, () const);
	CHECKTYPE(Arena, cols, int, () const);
	CHECKTYPE(Arena, player, Player*, () const);
	CHECKTYPE(Arena, vampireCount, int, () const);
	CHECKTYPE(Arena, getCellStatus, int, (int, int) const);
	CHECKTYPE(Arena, numberOfVampiresAt, int, (int, int) const);
	CHECKTYPE(Arena, display, void, (string) const);
	CHECKTYPE(Arena, setCellStatus, void, (int, int, int));
	CHECKTYPE(Arena, addVampire, bool, (int, int));
	CHECKTYPE(Arena, addPlayer, bool, (int, int));
	CHECKTYPE(Arena, moveVampires, void, ());

	Game g(1, 1, 1);
	CHECKTYPE(Game, play, void, ());
}

void findTheVampire(const Arena& a, int& r, int& c)
{
	if (a.numberOfVampiresAt(r - 1, c) == 1) r--;
	else if (a.numberOfVampiresAt(r + 1, c) == 1) r++;
	else if (a.numberOfVampiresAt(r, c - 1) == 1) c--;
	else if (a.numberOfVampiresAt(r, c + 1) == 1) c++;
	else assert(false);
}

void surroundWithPoison(Arena& a, int r, int c)
{
	a.setCellStatus(r - 1, c, HAS_POISON);
	a.setCellStatus(r + 1, c, HAS_POISON);
	a.setCellStatus(r, c - 1, HAS_POISON);
	a.setCellStatus(r, c + 1, HAS_POISON);
}

void doBasicTests()
{
	{
		Arena a(10, 20);
		a.addPlayer(2, 5);
		Player* pp = a.player();
		assert(pp->row() == 2 && pp->col() == 5 && !pp->isDead());
		assert(pp->move(NORTH) == "Player moved north.");
		assert(pp->row() == 1 && pp->col() == 5 && !pp->isDead());
		assert(pp->move(NORTH) == "Player couldn't move; player stands.");
		assert(pp->row() == 1 && pp->col() == 5 && !pp->isDead());
		pp->setDead();
		assert(pp->row() == 1 && pp->col() == 5 && pp->isDead());
	}
	{
		Arena a(10, 20);
		int r = 8;
		int c = 18;
		a.addPlayer(r, c);
		for (int k = 0; k < MAXVAMPIRES / 4; k++)
		{
			a.addVampire(r - 1, c);
			a.addVampire(r + 1, c);
			a.addVampire(r, c - 1);
			a.addVampire(r, c + 1);
		}
		assert(!a.player()->isDead());
		a.moveVampires();
		assert(a.player()->isDead());
	}
	{
		Arena a(10, 20);
		int r = 4;
		int c = 4;
		a.addVampire(r, c);
		surroundWithPoison(a, r, c);
		a.addPlayer(8, 18);
		assert(a.vampireCount() == 1 && a.numberOfVampiresAt(r, c) == 1);
		a.moveVampires();
		assert(a.vampireCount() == 1 && a.numberOfVampiresAt(r, c) == 0);
		findTheVampire(a, r, c);
		assert(a.getCellStatus(r, c) != HAS_POISON);
		a.moveVampires();
		assert(a.vampireCount() == 1 && a.numberOfVampiresAt(r, c) == 1);
		a.moveVampires();
		assert(a.vampireCount() == 1 && a.numberOfVampiresAt(r, c) == 0);
		findTheVampire(a, r, c);
		a.moveVampires();
		assert(a.vampireCount() == 1 && a.numberOfVampiresAt(r, c) == 1);
		surroundWithPoison(a, r, c);
		a.moveVampires();
		assert(a.vampireCount() == 0 && a.numberOfVampiresAt(r, c) == 0);
		assert(a.numberOfVampiresAt(r - 1, c) == 0);
		assert(a.numberOfVampiresAt(r + 1, c) == 0);
		assert(a.numberOfVampiresAt(r, c - 1) == 0);
		assert(a.numberOfVampiresAt(r, c + 1) == 0);
	}
	{
		Arena a(20, 20);
		a.addPlayer(1, 1);
		struct Coord
		{
			int r;
			int c;
			bool doomed;
		};
		Coord v[7] = {
			{ 19, 4, false }, { 4, 4, true }, { 4, 16, true }, { 19, 10, false },
			{ 10, 10, true }, { 19, 16, false }, { 10, 16 , true }
		};
		for (int k = 0; k < 7; k++)
		{
			a.addVampire(v[k].r, v[k].c);
			if (v[k].doomed)
				surroundWithPoison(a, v[k].r, v[k].c);
		}
		a.moveVampires();
		for (int k = 0; k < 7; k++)
		{
			if (v[k].doomed)
			{
				findTheVampire(a, v[k].r, v[k].c);
				surroundWithPoison(a, v[k].r, v[k].c);
			}
		}
		a.moveVampires();
		a.moveVampires();
		assert(a.vampireCount() == 3);
		a.moveVampires();
		a.moveVampires();
		// If the program crashes after leaving this compound statement, you
		// are probably messing something up when you delete a vampire after
		// it dies (or you have mis-coded the destructor).
		//
		// Draw a picture of your m_vampires array before the vampires move,
		// and also note the values of m_nVampires or any other variable you
		// might have that's involved with the number of vampires.  Trace
		// through your code step by step as the vampires move and die,
		// updating the picture according to what the code says, not what
		// you want it to do.  If you don't see a problem then, try tracing
		// through the destruction of the arena.
		//
		// If you execute the code, use the debugger to check on the values
		// of key variables at various points.  If you didn't try to learn
		// to use the debugger, insert statements that write the values of
		// key variables to cerr so you can trace the execution of your code
		// and see the first place where something has gone amiss.
	}
	cout << "Passed all basic tests" << endl;
	*/
} 
